version: '3'

volumes:
  mysql-volume:

services:
  db:
    container_name: db
    platform: linux/x86_64
    image: mysql:8.0-debian
    hostname: backend-service-db
    build:
      context: .
      dockerfile: backend-service/cmd/server/storage/Dockerfile
    ports:
      - "3306:3306"
    volumes:
      - ./backend-service/cmd/server/storage/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - mysql-volume:/var/lib/mysql
    environment:
      MYSQL_USER: admin
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: backend_service
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    healthcheck:
      test: mysql -h backend-service-db -P 3306 --user=$$MYSQL_USER --password=$$MYSQL_PASSWORD -e 'SHOW DATABASES;'
      start_period: 10s
      interval: 2s
      timeout: 5s
      retries: 100
  server:
    build:
      context: .
      dockerfile: backend-service/Dockerfile
    hostname: backend-service
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "9090:9090" # http
  api:
    build:
      context: .
      dockerfile: api-service/Dockerfile
    hostname: api-service
    depends_on:
      - server
    ports:
      - "8333:8333" # http
    healthcheck:
      test: curl --fail http://api-service:8333/healthcheck || exit 1;
      interval: 5s
      timeout: 5s
      retries: 10
  web-client:
    build:
      context: web-client
      dockerfile: ./Dockerfile
    hostname: web-client
    environment:
      API_HOST: api-service
    restart: always
    volumes:
      # To avoid mounting the node_modules folder we need to mount everything around it
      - ./web-client/components:/app/components
      - ./web-client/constants:/app/constants
      - ./web-client/pages:/app/pages
      - ./web-client/public:/app/public
      - ./web-client/styles:/app/styles
      - ./web-client/.eslintrc.json:/app/.eslintrc.json
      - ./web-client/.gitignore:/app/.gitignore
      - ./web-client/next.config.js:/app/next.config.js
      - ./web-client/next-env.d.ts:/app/next-env.d.ts
      - ./web-client/package.json:/app/package.json
      - ./web-client/package-lock.json:/app/package-lock.json
      - ./web-client/tsconfig.json:/app/tsconfig.json
    depends_on:
      - server
      - api
    ports:
      - "3000:3000" # http
    healthcheck:
      test: curl --fail http://api-service:8333/healthcheck || exit 1;
      interval: 5s
      timeout: 5s
      retries: 10
  adminer:
    image: adminer:standalone
    restart: always
    ports:
      - 8080:8080
